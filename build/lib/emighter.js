// Generated by CoffeeScript 1.3.3
(function() {
  var Emighter, EmighterNamespaced, create,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  create = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args), t = typeof result;
      return t == "object" || t == "function" ? result || child : child;
    })(Emighter, args, function(){});
  };

  Emighter = (function() {

    function Emighter() {
      this.emit = __bind(this.emit, this);

      this.on = __bind(this.on, this);

      this._iterate_fns = __bind(this._iterate_fns, this);
      this._fns = {};
    }

    Emighter.prototype._iterate_fns = function(fns, args, callback, index) {
      var fn, item, options, _done,
        _this = this;
      if (fns == null) {
        fns = [];
      }
      if (index == null) {
        index = 0;
      }
      item = fns[index];
      if (!(item != null)) {
        callback();
        return;
      }
      fn = item[0], options = item[1];
      _done = function() {
        return _this._iterate_fns(fns, args, callback, ++index);
      };
      switch (options.callback) {
        case true:
          return fn.apply(null, __slice.call(args).concat([_done]));
        case false:
          fn.apply(null, args);
          return _done();
        default:
          if (fn.length <= args.length) {
            fn.apply(null, args);
            return _done();
          } else {
            return fn.apply(null, __slice.call(args).concat([_done]));
          }
      }
    };

    Emighter.prototype.on = function(namespace, fn, options) {
      var _ref;
      if (options == null) {
        options = {};
      }
      if ((_ref = options.post) == null) {
        options.post = true;
      }
      if (!(this._fns[namespace] != null)) {
        this._fns[namespace] = [];
      }
      if (options.post) {
        return this._fns[namespace].push([fn, options]);
      } else {
        return this._fns[namespace].splice(0, 0, [fn, options]);
      }
    };

    Emighter.prototype.emit = function() {
      var args, callback, namespace, _ref;
      namespace = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      callback = function() {};
      if (args[0] instanceof Array && args[1] instanceof Function) {
        callback = (args.splice(1, 1))[0];
        (_ref = args[0]).push.apply(_ref, args.slice(1));
        args = args[0];
      }
      if (!(this._fns[namespace] != null)) {
        callback();
        return;
      }
      return this._iterate_fns(this._fns[namespace], args, function() {
        return callback();
      });
    };

    return Emighter;

  })();

  EmighterNamespaced = (function() {

    function EmighterNamespaced() {
      this.emit = __bind(this.emit, this);

      this.on = __bind(this.on, this);
      this.__emighter = new Emighter();
    }

    EmighterNamespaced.prototype.on = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.__emighter).on.apply(_ref, args);
    };

    EmighterNamespaced.prototype.emit = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.__emighter).emit.apply(_ref, args);
    };

    return EmighterNamespaced;

  })();

  exports.create = create;

  exports.Emighter = Emighter;

  exports.EmighterNamespaced = EmighterNamespaced;

}).call(this);
